FIND_PACKAGE(Git REQUIRED)

FUNCTION(PROJECT_VERSION_FROM_GIT)
	EXECUTE_PROCESS(
	COMMAND
		${GIT_EXECUTABLE} rev-parse --verify HEAD
	WORKING_DIRECTORY
		${PROJECT_SOURCE_DIR}
	RESULT_VARIABLE
		GIT_COMMIT_RES
	OUTPUT_VARIABLE
		GIT_COMMIT_STDOUT
	ERROR_QUIET
	OUTPUT_STRIP_TRAILING_WHITESPACE
	)

	IF(NOT GIT_COMMIT_RES)
		# define hash of git commit
		SET(PROJECT_GIT_COMMIT "${GIT_COMMIT_STDOUT}")
		SET(PROJECT_GIT_COMMIT "${PROJECT_GIT_COMMIT}" PARENT_SCOPE)
		SET(${PROJECT_NAME}_GIT_COMMIT "${PROJECT_GIT_COMMIT}" PARENT_SCOPE)

		EXECUTE_PROCESS(
		COMMAND
			${GIT_EXECUTABLE} describe --tags
		WORKING_DIRECTORY
			${PROJECT_SOURCE_DIR}
		RESULT_VARIABLE
			GIT_TAG_RES
		OUTPUT_VARIABLE
			GIT_TAG_STDOUT
		ERROR_QUIET
		OUTPUT_STRIP_TRAILING_WHITESPACE
		)

		IF(NOT GIT_TAG_RES AND GIT_TAG_STDOUT MATCHES "v([0-9]|[1-9][0-9]*)\\.([0-9]|[1-9][0-9]*)(-([1-9][0-9]*)-g[0-9a-f]+)?")
			SET(PROJECT_VERSION_MAJOR "${CMAKE_MATCH_1}")
			SET(PROJECT_VERSION_MINOR "${CMAKE_MATCH_2}")

			IF(CMAKE_MATCH_4)
				SET(PROJECT_VERSION_PATCH "${CMAKE_MATCH_4}")
			ELSE()
				SET(PROJECT_VERSION_PATCH 0)
			ENDIF()
		ELSE()
			MESSAGE(STATUS
				"Failed to find suitable tag to define version.\n"
				"Project should be tagged using 'vX.Y'"
				" pattern (e.g. 'v0.1')")

			EXECUTE_PROCESS(
			COMMAND
				${GIT_EXECUTABLE} rev-list --all --count
			WORKING_DIRECTORY
				${PROJECT_SOURCE_DIR}
			OUTPUT_VARIABLE
				GIT_COUNT_STDOUT
			ERROR_QUIET
			OUTPUT_STRIP_TRAILING_WHITESPACE
			)

			SET(PROJECT_VERSION_MAJOR 0)
			SET(PROJECT_VERSION_MINOR 0)
			SET(PROJECT_VERSION_PATCH ${GIT_COUNT_STDOUT})
		ENDIF()
	ELSE()
		MESSAGE(STATUS "There's no Git repository or it's empty,"
			" using version 0.0.0")

		SET(PROJECT_VERSION_MAJOR 0)
		SET(PROJECT_VERSION_MINOR 0)
		SET(PROJECT_VERSION_PATCH 0)
	ENDIF()

	STRING(CONCAT PROJECT_VERSION ${PROJECT_VERSION_MAJOR}
		"." ${PROJECT_VERSION_MINOR} "." ${PROJECT_VERSION_PATCH})

	SET(PROJECT_VERSION "${PROJECT_VERSION}" PARENT_SCOPE)
	SET(PROJECT_VERSION_MAJOR "${PROJECT_VERSION_MAJOR}" PARENT_SCOPE)
	SET(PROJECT_VERSION_MINOR "${PROJECT_VERSION_MINOR}" PARENT_SCOPE)
	SET(PROJECT_VERSION_PATCH "${PROJECT_VERSION_PATCH}" PARENT_SCOPE)

	SET(${PROJECT_NAME}_VERSION "${PROJECT_VERSION}" PARENT_SCOPE)
	SET(${PROJECT_NAME}_VERSION_MAJOR "${PROJECT_VERSION_MAJOR}" PARENT_SCOPE)
	SET(${PROJECT_NAME}_VERSION_MINOR "${PROJECT_VERSION_MINOR}" PARENT_SCOPE)
	SET(${PROJECT_NAME}_VERSION_PATCH "${PROJECT_VERSION_PATCH}" PARENT_SCOPE)

	MESSAGE(STATUS "Set version of ${PROJECT_NAME} to ${PROJECT_VERSION}")
ENDFUNCTION()
